RDBMSアーキテクチャとは？
クエリ実行=>データへアクセスするために構造のこと。
クエリを実行する=> クエリ評価エンジン => アクセスメソッド => バッファマネージャー。。。などに作業が移行する。
クエリを高速に実行するためには、クエリ評価エンジンとバッファマネージャーが重要。
クエリ評価エンジンにはクエリ解釈と実行計画がある。
バッファマネージャーは、メモリにデータを一時的に保存するシステム。

トランザクションとロックマネージャーは複数人でのDB操作のバッティングのマネージメントを行っている。
リカバリマネージャーはデータの担保を担っている。
ディスク容量マネージャーはHDDのことで、DB本体。

実行計画とは？
データ検索を高速化するため、データベースへのアクセス方法を計画として纏めたもの。
実行計画立案は、クエリ評価エンジンで行われる。
まず、パサーでクエリを分解してクエリを検証する
次にオプティマイザで実行計画をいくつか立てる
実行計画をカタログマネージャーを参考にしてコスト評価をする。
低コストの実行計画を提案する（プラン評価）


実行計画の確認の仕方は？
EXPLAIN
スキャンtype、スキャンされる行数、filterされる行数の割合などを確認できる
EXPLAIN ANALYZE
実際にクエリを実行して、スキャンした行数と実行時間が確認できる
処理速度を確認してINDEXを貼るか決める。


SQLの条件分岐とは？
UNION ALLとCASEがある。
UNION ALLはSELECT FROM ~でテーブルを複数回スキャンするためパフォーマンスが悪い。
なので、SQLで条件分岐したいときはCASE式を使用する。

mysql> SELECT * FROM employees LIMIT 10;
+--------+------------+------------+-----------+--------+------------+
| emp_no | birth_date | first_name | last_name | gender | hire_date  |
+--------+------------+------------+-----------+--------+------------+
|  10001 | '1953'-09-02 | Georgi     | Facello   | M      | '1986'-06-26 |
|  10002 | '1964'-06-02 | Bezalel    | Simmel    | F      | '1985'-11-21 |
|  10003 | '1959'-12-03 | Parto      | Bamford   | M      | '1986'-08-28 |
|  10004 | '1954'-05-01 | Chirstian  | Koblick   | M      | '1986'-12-01 |
|  10005 | '1955'-01-21 | Kyoichi    | Maliniak  | M      | '1989'-09-12 |
|  10006 | '1953'-04-20 | Anneke     | Preusig   | F      | '1989'-06-02 |
|  10007 | '1957'-05-23 | Tzvetan    | Zielinski | F      | '1989'-02-10 |
|  10008 | '1958'-02-'19 |' Saniya     | Kalloufi  | M      | '1994'-09-15 |
|  10009 | '1952'-04-'19 |' Sumant     | Peac      | F      | '1985'-02-18 |
|  10010 | '1963'-06-01 | Duangkaew  | Piveteau  | F      | '1989'-08-24 |
+--------+------------+------------+-----------+--------+------------+

'1950'年生まれと'1960'年生まれをすべて抽出して、それぞれの年代毎に値を割り振る
SELECT emp_no,birth_date,
    CASE WHEN birth_date LIKE ''195%'' THEN '50s'
         WHEN birth_date LIKE ''196%'' THEN '60s'
    END AS birth_age
FROM employees
WHERE emp_no BETWEEN '10001' AND '10050'
ORDER BY birth_date ASC;

N+1問題とは？
loop処理内で複数回クエリを発行することでパフォーマンスが低下すること。
クエリを１回発行する毎にクエリの前処理(クエリの伝送、検証、実行計画立案など)や後処理（結果をネットワークに伝送）が行われるためにN+１問題が発生する。
これを回避するために、データを1回のクエリですべて取得するようにする。
