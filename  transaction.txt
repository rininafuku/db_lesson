トランザクションとは？
データの不整合をなくすためのもの。
同時実行制御とクラッシュリカバリの2つ役割がある。
トランザクションを使用すると、複数の処理を一つのまとまりで実行することができる。トランザクション内のいくつかのSQL文が何らかの
理由で失敗した場合、他のSQL文の処理もなかったことにできる。

リカバリクラッシュリカバリ：すべての処理が成功した場合のみにデータを追加したいときに有効。
TRANSACTION START;
INSERT文を使用してテーブルAにデータを追加
INSERT文を使用してテーブルBにデータを追加
COMMIT; ROLLBACK;

同時実行制御：同時アクセスに対応する
トランザクションがスタートすると指定した値がロックされる。
COMMITして値を永続化することでアンロックされる。

同時実行制御の課題
AトランザクションがBトランザクションのアンロックを待ち、BトランザクションもAトランザクションのアンロックを待ち
処理がいつまでも完了しない状態のことをデットロックという。
この場合を想定してアプリケーションでエラー処理が必要になる。

トランザクションの特性
トランザクションの特性は５つある。

1.Atomicity:原子性
    トランザクション内のすべての処理は”成功”と"失敗"の2つのみになるということ。
    これにより、ケース数が”成功”と"失敗"の２択なり複雑性が低くなる。

2.Consistency:一貫性
    トランザクション内の処理では規定した制約に対して矛盾を発生させないこと。
    例えば、ユニークな会員IDという制約を持つカラムに対して、同時に複数人が登録処理を実行したことにより同じ会員ID(ユニークではないID)が登録される。これを発生させないためにロールバックさせる。
    上記の例では、トランザクション内では制約に対してデータ矛盾を起こさせないようにしている。この特性を一貫性という。

3.Isolation:分離性
    複数のトランザクションが同時に実行されても、実行結果は直列に実行した場合（順番に一つずつ実行した場合）の結果と同等にする特性のことを分離性という。
    ただし、分離性にはレベルが4つある。
    (1)Read Uncommitted:トランザクションが行った変更が確定していなくても他のトランザクションから読み取りが可能
      =>ダーティーリード、曖昧な読み取り、ファントムが発生する
    (2)Read Committed:トランザクションが行った変更がコミットされた後にのみ他のトランザクションから読み取りが可能
      =>曖昧な読み取り、ファントムが発生する
    (3)Repeatable Read:トランザクションが読み取ったデータ行を変更できないようにする。
      =>それ以外の行は変更できるので、ファントムが発生する
    (4)Serializable:複数のトランザクションが完全に直列化されたように実行されることが保証される

    補足
    ダーティーリード：
        トランザクションが他のトランザクションのコミット前の変更を読み取ると、それらの変更がロールバックされた場合に読み取ったデータは実際には存在しないデータになる可能性がある
    曖昧な読み取り:
        トランザクション内で同じデータを二回以上読み取るときに、その間に他のトランザクションがそのデータを変更してコミットすることで、読み取り結果が一貫しない（つまり、"曖昧"な）状態が発生すること。
    ファントム:
        特定の選択条件に一致する行を二回以上読み取るときに、その間に他のトランザクションが新たな行を挿入または削除してコミットすることで1回目の読み取りと2回目の読み取りで差分が発生する状態のこと。

4.Durability:永続性
    一度トランザクションがコミット（確定）された後は、その結果が永続的に保存される特性のこと。
    コミット後にクラッシュによってデータが消えないように、コミット=>ログファイルに実行処理を記録する。
